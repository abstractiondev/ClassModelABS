// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ClassModelABS.ClassModel
{
    using System;
    using System.IO;
    using System.Xml;
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    
    #line 1 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class JavaScriptClassGenerator_v1_0 : JavaScriptClassGenerator_v1_0Base
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("\r\n");
            
            #line 18 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
   
	// Set abstraction specific type and single file specific extension
	//TransformGenerator< ClassModelAbstractionType >(GenerateRoot, ".designer.js");	
	GenerateRoot();

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 23 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
 
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			ClassModelAbstractionType abs = LoadXml<ClassModelAbstractionType>(xmlFileName);
			CurrentAbstraction = abs;
			string content = TransformText();
			string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + ".designer.js";
			result.Add(Tuple.Create(outputFile, content));
		}
		return result.ToArray();
	}
	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( ClassModelAbstractionType ) abs;
	}
	
	ClassModelAbstractionType CurrentAbstraction;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}
	
	void GenerateAbstraction(ClassModelAbstractionType abstraction)
	{
		foreach(var classesItem in abstraction.Classes)
			GenerateClasses(classesItem);
	}	
	
	void GenerateClasses(ClassesType classes)
	{
		
        
        #line default
        #line hidden
        
        #line 58 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t\t\tusing System;\r\n\r\n\t\tnamespace ");

        
        #line default
        #line hidden
        
        #line 61 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classes.namespaceName));

        
        #line default
        #line hidden
        
        #line 61 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(" {\r\n\t\t\t");

        
        #line default
        #line hidden
        
        #line 62 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"

		foreach(var classItem in classes.Class)
		{
			
        
        #line default
        #line hidden
        
        #line 65 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t\tpublic partial class ");

        
        #line default
        #line hidden
        
        #line 66 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classItem.name));

        
        #line default
        #line hidden
        
        #line 66 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(" {\r\n\t\t\t\t");

        
        #line default
        #line hidden
        
        #line 67 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
 GenerateProperties(classItem.Properties); 
        
        #line default
        #line hidden
        
        #line 67 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t\t\t");

        
        #line default
        #line hidden
        
        #line 68 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
 GenerateMethods(classItem.Methods); 
        
        #line default
        #line hidden
        
        #line 68 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t\t}\r\n\t\t\t");

        
        #line default
        #line hidden
        
        #line 70 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"

		}
			
        
        #line default
        #line hidden
        
        #line 72 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t}\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 74 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"

	}
	
	void GenerateMethods(MethodType[] methods)
	{
		if(methods == null)
			return;
		foreach(MethodType method in methods)
		{
			if(method.Implementation != null)
			{
				GenerateMethodWithImplementation(method);
			} else {
				GenerateMethod(method);
			}
		}
	}
	
	void GenerateMethodWithImplementation(MethodType method)
	{
		ImplementationType outputToGenerate = method.Implementation.FirstOrDefault(impl => impl.language == ImplementationTypeLanguage.C1);
		if(outputToGenerate == null)
			return;
		
        
        #line default
        #line hidden
        
        #line 97 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 98 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(outputToGenerate.Value ?? ""));

        
        #line default
        #line hidden
        
        #line 98 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 99 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"


	}
	
	void GenerateMethod(MethodType method)
	{
		throw new NotSupportedException("Methods without implementation not yet supported");
	}
	
	void GenerateProperties(PropertyType[] properties)
	{
		
		foreach(var prop in properties)
		{
			bool isAuto = prop.isAutoProperty;
			if(isAuto) {
				
		
        
        #line default
        #line hidden
        
        #line 116 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t\tpublic ");

        
        #line default
        #line hidden
        
        #line 117 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.dataType));

        
        #line default
        #line hidden
        
        #line 117 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 117 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.name));

        
        #line default
        #line hidden
        
        #line 117 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(" { get; set; }\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 118 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"

			} else
			{
		
        
        #line default
        #line hidden
        
        #line 121 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("\t\t\tpublic ");

        
        #line default
        #line hidden
        
        #line 122 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.dataType));

        
        #line default
        #line hidden
        
        #line 122 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 122 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.name));

        
        #line default
        #line hidden
        
        #line 122 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(" \r\n\t\t\t{ \r\n\t\t\t\tget { return ");

        
        #line default
        #line hidden
        
        #line 124 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.name));

        
        #line default
        #line hidden
        
        #line 124 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("Getteri(this); }\r\n\t\t\t\tset { ");

        
        #line default
        #line hidden
        
        #line 125 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prop.name));

        
        #line default
        #line hidden
        
        #line 125 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"
this.Write("Setteri(value); }\r\n\t\t\t}\r\n\t\t\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 128 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\JavaScriptClassGenerator_v1_0.tt"

			}
		}
	}

        
        #line default
        #line hidden
        
        #line 2 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
 
	enum AbstractionShareLevel
	{
		Local,
		Shared,
		Modular,
	}
	
	bool IsLocal
	{
		get {
			return ShareLevel == AbstractionOptions.GeneralTypeShareLevel.Local;
		}
	}
	
	AbstractionOptions.AbstractionOptionsType CurrentOptions;
	AbstractionOptions.GeneralTypeShareLevel ShareLevel {
		get {
			return CurrentOptions.General.shareLevel;
		}
	}
	
	void TransformGenerator<AbstractionType>(Action rootLevelGenerator, string sharedSingleFileExtension)
	{
		// Abstraction(s) that are supposed to be shared must be shared by default.
		// This is simply because any change to "shared" makes it modified compared to the shared version.
		// Thus making abstraction "local" allows also making the changes that make it behave like "local".
		// To make the abstraction "local" make following changes:
		// 1. Modify the output - directive right on top of the file (2nd line) from "?" to ".designer.cs"
		// 2. Set the AbstractionShareLevel below to Shared 
		// 3. After the changes, the abstraction starts to generate its output right below the template:
		// - Change the .cs file properties so that it doesn't compile in the abstraction-project
		// - Link the output .cs file to appropriate projects (to replace the links from AbstractionContent/Out directory)
		// 4. If necessary, copy over and alter the include-files specified for common includes
		
		// ShareLevel = AbstractionShareLevel.Shared;
		
		string templateDirectoryPath = Path.GetDirectoryName(Host.TemplateFile);
		DirectoryInfo dirInfo = new DirectoryInfo(templateDirectoryPath);
		dirInfo = dirInfo.Parent;
		string optionsFile = Path.Combine(dirInfo.FullName, "Options.xml");
		CurrentOptions = LoadXml<AbstractionOptions.AbstractionOptionsType>(optionsFile);

		if(ShareLevel != AbstractionOptions.GeneralTypeShareLevel.Modular)
		{
			string directoryName = GetContentDirectoryFromTemplateFullPath(Host.TemplateFile, IsLocal == false);
			string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");
			
			foreach(string xmlFileName in xmlFileNames)
			{
				AbstractionType current = LoadXml<AbstractionType>(xmlFileName);
				SetCurrentAbstraction(current);
				rootLevelGenerator();
			}
		} 
		else
		{
			rootLevelGenerator();
		}
		
		if(ShareLevel == AbstractionOptions.GeneralTypeShareLevel.Shared)
		{
			WriteContentToSingleOutput(Host.TemplateFile, sharedSingleFileExtension);
		}
	}
	
	
	string GetContentDirectoryFromTemplateFullPath(string templateFullPath, bool isShared)
	{
		string templateDirectoryName = Path.GetDirectoryName(templateFullPath);
		string contentDir =  isShared ? @"In\Content_v1_0" : "Content_v1_0";
		string directoryName = Path.Combine(templateDirectoryName, contentDir);
		if(isShared) {
			System.IO.DirectoryInfo absRootDirInfo = new System.IO.DirectoryInfo(templateDirectoryName);
			absRootDirInfo = absRootDirInfo.Parent;
			string abstractionName = absRootDirInfo.Name;
			directoryName = directoryName.Replace(abstractionName, "AbstractionContent");
		}
		return directoryName;
	}
	
	void WriteContentToSingleOutput(string templateFullPath, string extension)
	{
		string templateDirectoryName = Path.GetDirectoryName(templateFullPath);
		string contentDir = "Out";
		string directoryName = Path.Combine(templateDirectoryName, contentDir);
		string contentFileName = System.IO.Path.GetFileNameWithoutExtension(templateFullPath) + extension;
		System.IO.DirectoryInfo absRootDirInfo = new System.IO.DirectoryInfo(templateDirectoryName);
		absRootDirInfo = absRootDirInfo.Parent;
		string abstractionName = absRootDirInfo.Name;
		directoryName = directoryName.Replace(abstractionName, "AbstractionContent");
		string contentFullName = Path.Combine(directoryName, contentFileName);
		string contentData = this.GenerationEnvironment.ToString();
		this.GenerationEnvironment.Clear();
		File.WriteAllText(contentFullName, contentData);
	}

	T LoadXml<T>(string xmlFileName) {
		using(FileStream fStream = File.OpenRead(xmlFileName)) {
			XmlSerializer serializer = new XmlSerializer(typeof(T));
			T result = (T) serializer.Deserialize(fStream);
			fStream.Close();
			return result;
		}
	}

	void BeginNamespace(string namespaceName) {
		
        
        #line default
        #line hidden
        
        #line 109 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write("namespace ");

        
        #line default
        #line hidden
        
        #line 109 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));

        
        #line default
        #line hidden
        
        #line 109 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write(" { \r\n\t\t");

        
        #line default
        #line hidden
        
        #line 110 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
 
	}

	void EndBlock() {
		
        
        #line default
        #line hidden
        
        #line 114 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"
this.Write(" } ");

        
        #line default
        #line hidden
        
        #line 114 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude"

	}

		
	static string RemoveScands(string sourceString) {
		return sourceString.Replace('ä', 'a').Replace('Ä', 'A').Replace('å', 'a').Replace('Å', 'A').Replace('ö', 'o').Replace('Ö', 'O');
	}
	
	public class GenerationItem
	{
		public string FileName;
		public string Content;
	}
	

        
        #line default
        #line hidden
        
        #line 1 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\..\..\abscommon\CommonInclude\Common\AbstractionOptions_namespace.ttinclude"

public class AbstractionOptions { 
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/AbstractionOptions.xsd")]
[System.Xml.Serialization.XmlRootAttribute("AbstractionOptions", Namespace="http://tempuri.org/AbstractionOptions.xsd", IsNullable=false)]
public partial class AbstractionOptionsType {
    
    private GeneralType generalField;
    
    /// <remarks/>
    public GeneralType General {
        get {
            return this.generalField;
        }
        set {
            this.generalField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/AbstractionOptions.xsd")]
public partial class GeneralType {
    
    private GeneralTypeShareLevel shareLevelField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public GeneralTypeShareLevel shareLevel {
        get {
            return this.shareLevelField;
        }
        set {
            this.shareLevelField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/AbstractionOptions.xsd")]
public enum GeneralTypeShareLevel {
    
    /// <remarks/>
    Local,
    
    /// <remarks/>
    Shared,
    
    /// <remarks/>
    Modular,
}
} 
        
        #line default
        #line hidden
        
        #line 1 "C:\work\abs\Caloom\Abstractions\ClassModelABS\ClassModel\ClassModel_v1_0.ttinclude"

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema1.xsd")]
[System.Xml.Serialization.XmlRootAttribute("ClassModelAbstraction", Namespace="http://tempuri.org/XMLSchema1.xsd", IsNullable=false)]
public partial class ClassModelAbstractionType {
    
    private ClassesType[] classesField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Classes")]
    public ClassesType[] Classes {
        get {
            return this.classesField;
        }
        set {
            this.classesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema1.xsd")]
public partial class ClassesType {
    
    private ClassType[] classField;
    
    private string namespaceNameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Class")]
    public ClassType[] Class {
        get {
            return this.classField;
        }
        set {
            this.classField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string namespaceName {
        get {
            return this.namespaceNameField;
        }
        set {
            this.namespaceNameField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema1.xsd")]
public partial class ClassType {
    
    private PropertyType[] propertiesField;
    
    private MethodType[] methodsField;
    
    private string nameField;
    
    private string designDescField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Property", IsNullable=false)]
    public PropertyType[] Properties {
        get {
            return this.propertiesField;
        }
        set {
            this.propertiesField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Method", IsNullable=false)]
    public MethodType[] Methods {
        get {
            return this.methodsField;
        }
        set {
            this.methodsField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string designDesc {
        get {
            return this.designDescField;
        }
        set {
            this.designDescField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema1.xsd")]
public partial class PropertyType {
    
    private string nameField;
    
    private string dataTypeField;
    
    private bool isAutoPropertyField;
    
    public PropertyType() {
        this.isAutoPropertyField = true;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string dataType {
        get {
            return this.dataTypeField;
        }
        set {
            this.dataTypeField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(true)]
    public bool isAutoProperty {
        get {
            return this.isAutoPropertyField;
        }
        set {
            this.isAutoPropertyField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema1.xsd")]
public partial class ImplementationType {
    
    private ImplementationTypeLanguage languageField;
    
    private string valueField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public ImplementationTypeLanguage language {
        get {
            return this.languageField;
        }
        set {
            this.languageField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value {
        get {
            return this.valueField;
        }
        set {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/XMLSchema1.xsd")]
public enum ImplementationTypeLanguage {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("C#")]
    C,
    
    /// <remarks/>
    Java,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("C++")]
    C1,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema1.xsd")]
public partial class MethodType {
    
    private ImplementationType[] implementationField;
    
    private string nameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("Implementation")]
    public ImplementationType[] Implementation {
        get {
            return this.implementationField;
        }
        set {
            this.implementationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class JavaScriptClassGenerator_v1_0Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
